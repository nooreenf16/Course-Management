<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>instructor-service</artifactId>
	<version>hw4</version>
	<name>instructor-service</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<!--
    		This test skipping is done purely to avoid any tests that involve
    		connecting to the database, since the database will not exist at the time
    		of compilation. This will cause tests to fail, since the beans which are tied
    		to the database cannot be created.
		-->
		<maven.test.skip>true</maven.test.skip>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.1</spring-cloud.version>
		<docker.image.prefix>nfwq4</docker.image.prefix>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>


	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>2022.0.1</version> <!-- Match this to your Spring Cloud version -->
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<build>
		<plugins>
<!--			<plugin>-->
<!--				<groupId>com.spotify</groupId>-->
<!--				<artifactId>dockerfile-maven-plugin</artifactId>-->
<!--				<version>1.4.13</version>-->
<!--				<configuration>-->
<!--					<repository>${docker.image.prefix}/${project.artifactId}</repository>-->
<!--					<tag>${project.version}</tag>-->
<!--					<buildArgs>-->
<!--						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>-->
<!--					</buildArgs>-->
<!--				</configuration>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<id>default</id>-->
<!--						<phase>install</phase>-->
<!--						<goals>-->
<!--							<goal>build</goal>-->
<!--							<goal>push</goal>-->
<!--						</goals>-->
<!--					</execution>-->
<!--				</executions>-->
<!--			</plugin>-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>3.3.1</version>
				<configuration>
					<!-- Docker image details -->
					<to>
						<image>${docker.image.prefix}/${project.artifactId}:${project.version}</image>
					</to>

					<!-- Platform specifications (arm64) -->
					<platforms>
						<platform>
							<architecture>amd64</architecture>
							<os>linux</os>
						</platform>
					</platforms>

					<!-- Build arguments (e.g., JAR file path) -->
					<container>
						<mainClass>com.example.instructor.InstructorServiceApplication</mainClass>  <!-- Adjust your main class -->
					</container>
				</configuration>

				<executions>
					<execution>
						<id>default</id>
						<phase>install</phase>
						<goals>
							<goal>build</goal>
<!--							<goal>push</goal>-->
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>

</project>
